#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <pthread.h>
#include <stdint.h>

pthread_barrier_t barrier;
int loops;
__thread uint64_t globalCount;

void __attribute__((optimize("O0")))
do_lotsa_work(void){
  int r = rand() % 100000;

  for ( int i = 0; i < 100000; i++ ){
    if (r % 100000 == 0){
      globalCount++;
    }
  }
}

void *
run(void * arg) {
  unsigned i = 0;
  pthread_barrier_wait(&barrier);
  for (;i < loops; i++) {
    do_lotsa_work();
  }
  pthread_barrier_wait(&barrier);
}

int main(int argc, char ** argv) {
  int threads = atoi(argv[1]);
  loops = atoi(argv[2]);
  pthread_barrier_init(&barrier, NULL, threads);
  pthread_t * threadids = malloc(sizeof(pthread_t) * threads);

  for ( int i = 0; i < threads; i++){
    pthread_create(&threadids[i], NULL, run, NULL);
  }
  for ( int i = 0; i < threads; i++ ){
    pthread_join(threadids[i], NULL);
  }
}

